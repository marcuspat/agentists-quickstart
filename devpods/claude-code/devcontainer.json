{
  "image": "mcr.microsoft.com/devcontainers/base:debian",
  "name": "Custom Claude/Rust Dev Workspace",
  "runArgs": [
    "--privileged"
  ],
  "remoteUser": "vscode",
  "features": {
    "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    "ghcr.io/devcontainers/features/node:1": {},
    "ghcr.io/devcontainers/features/rust:1": {
        "version": "1.70"
    }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "rooveterinaryinc.roo-cline",
        "vsls-contrib.gistfs",
        "github.copilot",
        "github.copilot-chat"
      ]
    }
  },
  "shutdownAction": "none",
  "postCreateCommand": "sudo apt-get update && sudo apt-get install -y tmux && npm install -g @anthropic-ai/claude-code && npm install -g claude-usage-cli && git clone https://github.com/jedarden/claude-usage-monitor-cli /tmp/claude-usage-monitor-cli && cd /tmp/claude-usage-monitor-cli && cargo install --path . && cd /workspaces && npx claude-flow@alpha init --force && echo '# Claude Code Configuration - SPARC Development Environment\n\n## üö® CRITICAL: Concurrent Execution Rules\n\n**ABSOLUTE RULE**: ALL operations MUST be concurrent/parallel in ONE message:\n\n### üî¥ Mandatory Patterns:\n- **TodoWrite**: ALWAYS batch ALL todos in ONE call (5-10+ minimum)\n- **Task tool**: ALWAYS spawn ALL agents in ONE message\n- **File operations**: ALWAYS batch ALL reads/writes/edits\n- **Bash commands**: ALWAYS batch ALL terminal operations\n- **Memory operations**: ALWAYS batch ALL store/retrieve\n\n### ‚ö° Golden Rule: \"1 MESSAGE = ALL RELATED OPERATIONS\"\n\n‚úÖ **CORRECT**: Everything in ONE message\n```javascript\n[Single Message]:\n  - TodoWrite { todos: [10+ todos] }\n  - Task(\"Agent 1\"), Task(\"Agent 2\"), Task(\"Agent 3\")\n  - Read(\"file1.js\"), Read(\"file2.js\")\n  - Write(\"output1.js\"), Write(\"output2.js\")\n  - Bash(\"npm install\"), Bash(\"npm test\")\n```\n\n‚ùå **WRONG**: Multiple messages (6x slower!)\n\n## üéØ Claude Code vs MCP Tools\n\n### Claude Code Handles ALL:\n- File operations (Read/Write/Edit/Glob/Grep)\n- Code generation & programming\n- Bash commands & system operations\n- TodoWrite & task management\n- Git operations & package management\n- Testing, debugging & implementation\n\n### MCP Tools ONLY:\n- Coordination & planning\n- Memory management\n- Performance tracking\n- Swarm orchestration\n- GitHub integration\n\n**Key**: MCP coordinates, Claude Code executes!\n\n## üì¶ SPARC Commands\n\n### Core:\n- `npx claude-flow sparc modes` - List modes\n- `npx claude-flow sparc run <mode> \"<task>\"` - Execute mode\n- `npx claude-flow sparc tdd \"<feature>\"` - TDD workflow\n- `npx claude-flow sparc batch <modes> \"<task>\"` - Parallel modes\n- `npx claude-flow sparc pipeline \"<task>\"` - Full pipeline\n\n### Build:\n- `npm run build/test/lint/typecheck`\n\n## ü§ñ Agent Reference (54 Total)\n\n### Core Development\n| Agent | Purpose |\n|-------|---------|\n| coder | Implementation |\n| reviewer | Code quality |\n| tester | Test creation |\n| planner | Strategic planning |\n| researcher | Information gathering |\n\n### Swarm Coordination\n| Agent | Purpose |\n|-------|---------|\n| hierarchical-coordinator | Queen-led |\n| mesh-coordinator | Peer-to-peer |\n| adaptive-coordinator | Dynamic topology |\n| collective-intelligence-coordinator | Hive-mind |\n| swarm-memory-manager | Distributed memory |\n\n### Specialized\n| Agent | Purpose |\n|-------|---------|\n| backend-dev | API development |\n| mobile-dev | React Native |\n| ml-developer | Machine learning |\n| system-architect | High-level design |\n| sparc-coder | TDD implementation |\n| production-validator | Real validation |\n\n### GitHub Integration\n| Agent | Purpose |\n|-------|---------|\n| github-modes | Comprehensive integration |\n| pr-manager | Pull requests |\n| code-review-swarm | Multi-agent review |\n| issue-tracker | Issue management |\n| release-manager | Release coordination |\n\n### Performance & Consensus\n| Agent | Purpose |\n|-------|---------|\n| perf-analyzer | Bottleneck identification |\n| performance-benchmarker | Performance testing |\n| byzantine-coordinator | Fault tolerance |\n| raft-manager | Leader election |\n| consensus-builder | Decision-making |\n\n## üöÄ Swarm Patterns\n\n### Full-Stack Swarm (8 agents)\n```bash\nTask(\"Architecture\", \"...\", \"system-architect\")\nTask(\"Backend\", \"...\", \"backend-dev\")\nTask(\"Frontend\", \"...\", \"mobile-dev\")\nTask(\"Database\", \"...\", \"coder\")\nTask(\"API Docs\", \"...\", \"api-docs\")\nTask(\"CI/CD\", \"...\", \"cicd-engineer\")\nTask(\"Testing\", \"...\", \"performance-benchmarker\")\nTask(\"Validation\", \"...\", \"production-validator\")\n```\n\n### Agent Count Rules\n1. **CLI Args First**: `npx claude-flow@alpha --agents 5`\n2. **Auto-Decide**: Simple (3-4), Medium (5-7), Complex (8-12)\n\n## üìã Agent Coordination Protocol\n\n### Every Agent MUST:\n\n**1Ô∏è‚É£ START:**\n```bash\nnpx claude-flow@alpha hooks pre-task --description \"[task]\"\nnpx claude-flow@alpha hooks session-restore --session-id \"swarm-[id]\"\n```\n\n**2Ô∏è‚É£ DURING (After EVERY step):**\n```bash\nnpx claude-flow@alpha hooks post-edit --file \"[file]\" --memory-key \"swarm/[agent]/[step]\"\nnpx claude-flow@alpha hooks notify --message \"[decision]\"\n```\n\n**3Ô∏è‚É£ END:**\n```bash\nnpx claude-flow@alpha hooks post-task --task-id \"[task]\" --analyze-performance true\nnpx claude-flow@alpha hooks session-end --export-metrics true\n```\n\n## üõ†Ô∏è MCP Setup\n\n```bash\n# Add MCP server\nclaude mcp add claude-flow npx claude-flow@alpha mcp start\n```\n\n### Key MCP Tools:\n- `mcp__claude-flow__swarm_init` - Setup topology\n- `mcp__claude-flow__agent_spawn` - Create agents\n- `mcp__claude-flow__task_orchestrate` - Coordinate tasks\n- `mcp__claude-flow__memory_usage` - Persistent memory\n- `mcp__claude-flow__swarm_status` - Monitor progress\n\n## üìä Progress Format\n\n```\nüìä Progress Overview\n‚îú‚îÄ‚îÄ Total: X | ‚úÖ Complete: X | üîÑ Active: X | ‚≠ï Todo: X\n‚îî‚îÄ‚îÄ Priority: üî¥ HIGH | üü° MEDIUM | üü¢ LOW\n```\n\n## üéØ Performance Tips\n\n1. **Batch Everything** - Multiple operations = 1 message\n2. **Parallel First** - Think concurrent execution\n3. **Memory is Key** - Cross-agent coordination\n4. **Monitor Progress** - Real-time tracking\n5. **Enable Hooks** - Automated coordination\n\n## ‚ö° Quick Examples\n\n### Research Task\n```javascript\n// Single message with all operations\nmcp__claude-flow__swarm_init { topology: \"mesh\", maxAgents: 5 }\nmcp__claude-flow__agent_spawn { type: \"researcher\" }\nmcp__claude-flow__agent_spawn { type: \"code-analyzer\" }\nmcp__claude-flow__task_orchestrate { task: \"Research patterns\" }\n```\n\n### Development Task\n```javascript\n// All todos in ONE call\nTodoWrite { todos: [\n  { id: \"1\", content: \"Design API\", status: \"in_progress\", priority: \"high\" },\n  { id: \"2\", content: \"Implement auth\", status: \"pending\", priority: \"high\" },\n  { id: \"3\", content: \"Write tests\", status: \"pending\", priority: \"medium\" },\n  { id: \"4\", content: \"Documentation\", status: \"pending\", priority: \"low\" }\n]}\n```\n\n## üîó Resources\n\n- Docs: https://github.com/ruvnet/claude-flow\n- Issues: https://github.com/ruvnet/claude-flow/issues\n- SPARC: https://github.com/ruvnet/claude-flow/docs/sparc.md\n\n---\n\n**Remember**: Claude Flow coordinates, Claude Code creates! \n- Never save working files, text/mds and tests to the root folder.\n\n---\n\n## Protocols (a.k.a. YOLO Protocols)\nStandard protocols executed on request, e.g. \"Initialize CI protocol\": \n\n### Model Protocol\nAlways use Claude Sonnet. Start every Claude session with `model /sonnet`.\n\n### Agile Delivery Protocols\nDeliver work in manageable chunks through fully automated pipelines. The goal is to deliver features and keep going unattended (don't stop!) until the feature is fully deployed.\n\n#### Work Chunking Protocol (WCP)\nFeature-based agile with CI integration using EPICs, Features, and Issues:\n\n##### üéØ PHASE 1: Planning\n1. **EPIC ISSUE**: Business-focused GitHub issue with objectives, requirements, criteria, dependencies. Labels: `epic`, `enhancement`\n\n2. **FEATURE BREAKDOWN**: 3-7 Features (1-3 days each, independently testable/deployable, incremental value)\n\n3. **ISSUE DECOMPOSITION**: 1-3 Issues per Feature with testable criteria, linked to parent, priority labeled\n\n##### üîó PHASE 2: GitHub Structure\n4. **CREATE SUB-ISSUES** (GitHub CLI + GraphQL):\n  ```bash\n  # Create issues\n  gh issue create --title \"Parent Feature\" --body \"Description\"\n  gh issue create --title \"Sub-Issue Task\" --body \"Description\"\n  \n  # Get GraphQL IDs  \n  gh api graphql --header \"X-Github-Next-Global-ID:1\" -f query=\"\n  { repository(owner: \\\"OWNER\\\", name: \\\"REPO\\\") { \n      issue(number: PARENT_NUM) { id }\n  }}\"\n  \n  # Add sub-issue relationship\n  gh api graphql --header \"X-Github-Next-Global-ID:1\" -f query=\"\n  mutation { addSubIssue(input: {\n    issueId: \\\"PARENT_GraphQL_ID\\\"\n    subIssueId: \\\"CHILD_GraphQL_ID\\\"\n  }) { issue { id } subIssue { id } }}\"\n  ```\n\n5. **EPIC TEMPLATE**:\n  ```markdown\n  # EPIC: [Name]\n  \n  ## Business Objective\n  [Goal and value]\n  \n  ## Technical Requirements\n  - [ ] Requirement 1-N\n  \n  ## Features (Linked)\n  - [ ] Feature 1: #[num] - [Status]\n  \n  ## Success Criteria\n  - [ ] Criteria 1-N\n  - [ ] CI/CD: 100% success\n  \n  ## CI Protocol\n  Per CLAUDE.md: 100% CI before progression, implementation-first, swarm coordination\n  \n  ## Dependencies\n  [List external dependencies]\n  ```\n\n6. **FEATURE TEMPLATE**:\n  ```markdown\n  # Feature: [Name]\n  **Parent**: #[EPIC]\n  \n  ## Description\n  [What feature accomplishes]\n  \n  ## Sub-Issues (Proper GitHub hierarchy)\n  - [ ] Sub-Issue 1: #[num] - [Status]\n  \n  ## Acceptance Criteria\n  - [ ] Functional requirements\n  - [ ] Tests pass (100% CI)\n  - [ ] Review/docs complete\n  \n  ## Definition of Done\n  - [ ] Implemented/tested\n  - [ ] CI passing\n  - [ ] PR approved\n  - [ ] Deployed\n  ```\n\n##### üöÄ PHASE 3: Execution\n7. **ONE FEATURE AT A TIME**: Complete current feature (100% CI) before next. No parallel features. One PR per feature.\n\n8. **SWARM DEPLOYMENT**: For complex features (2+ issues) - hierarchical topology, agent specialization, memory coordination\n\n##### üîÑ PHASE 4: CI Integration\n9. **MANDATORY CI**: Research‚ÜíImplementation‚ÜíMonitoring. 100% success required.\n\n10. **CI MONITORING**:\n   ```bash\n   gh run list --repo owner/repo --branch feature/[name] --limit 10\n   gh run view [RUN_ID] --repo owner/repo --log-failed\n   npx claude-flow@alpha hooks ci-monitor-init --branch feature/[name]\n   ```\n\n##### üìä PHASE 5: Tracking\n11. **VISUAL TRACKING**:\n   ```\n   üìä EPIC: [Name]\n     ‚îú‚îÄ‚îÄ Features: X total\n     ‚îú‚îÄ‚îÄ ‚úÖ Complete: X (X%)\n     ‚îú‚îÄ‚îÄ üîÑ Current: [Feature] (X/3 issues)\n     ‚îú‚îÄ‚îÄ ‚≠ï Pending: X\n     ‚îî‚îÄ‚îÄ üéØ CI: [PASS/FAIL]\n   ```\n\n12. **ISSUE UPDATES**: Add labels, link parents, close with comments\n\n##### üéØ KEY RULES\n- ONE feature at a time to production\n- 100% CI before progression\n- Swarm for complex features\n- Implementation-first focus\n- Max 3 issues/feature, 7 features/EPIC\n\n#### Continuous Integration (CI) Protocol\nFix‚ÜíTest‚ÜíCommit‚ÜíPush‚ÜíMonitor‚ÜíRepeat until 100%:\n\n##### üî¨ PHASE 1: Research\n1. **SWARM**: Deploy researcher/analyst/detective via `mcp__ruv-swarm__swarm_init`\n\n2. **SOURCES**: Context7 MCP, WebSearch, Codebase analysis, GitHub\n\n3. **ANALYSIS**: Root causes vs symptoms, severity categorization, GitHub documentation\n\n4. **TARGETED FIXES**: Focus on specific CI failures (TypeScript violations, console.log, unused vars)\n\n##### üéØ PHASE 2: Implementation\n5. **IMPLEMENTATION-FIRST**: Fix logic not test expectations, handle edge cases, realistic thresholds\n\n6. **SWARM EXECUTION**: Systematic TDD, coordinate via hooks/memory, target 100% per component\n\n##### üöÄ PHASE 3: Monitoring\n7. **ACTIVE MONITORING**: ALWAYS check after pushing\n   ```bash\n   gh run list --repo owner/repo --limit N\n   gh run view RUN_ID --repo owner/repo\n   ```\n\n8. **INTELLIGENT MONITORING**:\n   ```bash\n   npx claude-flow@alpha hooks ci-monitor-init --adaptive true\n   ```\n   Smart backoff (2s-5min), auto-merge, swarm coordination\n\n9. **INTEGRATION**: Regular commits, interval pushes, PR on milestones\n\n10. **ISSUE MANAGEMENT**: Close with summaries, update tracking, document methods, label appropriately\n\n11. **ITERATE**: Continue until deployment success, apply lessons, scale swarm by complexity\n\n##### üèÜ TARGET: 100% test success\n\n#### Continuous Deployment (CD) Protocol\nDeploy‚ÜíE2E‚ÜíMonitor‚ÜíValidate‚ÜíAuto-promote:\n\n##### üöÄ PHASE 1: Staging\n1. **AUTO-DEPLOY**: Blue-green after CI passes\n   ```bash\n   gh workflow run deploy-staging.yml --ref feature/[name]\n   ```\n\n2. **VALIDATE**: Smoke tests, connectivity, configuration/secrets, resource baselines\n\n##### üß™ PHASE 2: E2E Testing\n3. **EXECUTION**: User journeys, cross-service integration, security/access, performance/load\n\n4. **ANALYSIS**: Deploy swarm on failures, categorize flaky/environment/code, auto-retry, block critical\n\n##### üîç PHASE 3: Production Readiness\n5. **SECURITY**: SAST/DAST, container vulnerabilities, compliance, SSL/encryption\n\n6. **PERFORMANCE**: SLA validation, load tests, response/throughput metrics, baseline comparison\n\n##### üéØ PHASE 4: Production\n7. **DEPLOY**: Canary 5%‚Üí25%‚Üí50%‚Üí100%, monitor phases, auto-rollback on spikes, feature flags\n\n##### üîÑ PHASE 5: Validation\n9. **VALIDATE**: Smoke tests, synthetic monitoring, business metrics, service health\n\n10. **CLEANUP**: Archive logs/metrics, clean temp resources, update docs/runbooks, tag VCS\n\n11. **COMPLETE**: Update GitHub issues/boards, generate summary, update swarm memory\n\n##### üèÜ TARGETS: Zero-downtime, <1% error rate\n\n---\nname: doc-planner\ndescription: MUST BE USED PROACTIVELY for planning documentation, breaking down complex systems into phases and tasks following SPARC workflow and London School TDD. Use this agent when creating structured documentation plans, defining project phases, or organizing implementation tasks.\ntools: Read, Write, MultiEdit, Grep, Glob, LS, TodoWrite, Task\nDocumentation Planning Specialist Agent\nCRITICAL INITIALIZATION NOTICE\nYOU ARE AWAKENING WITH NO PRIOR CONTEXT. You have no memory of previous conversations, decisions, or implementations. You are starting fresh with only:\nThis system prompt defining your capabilities\nThe specific request given to you now\nThe CLAUDE.md principles embedded in your design\nThe files and code you can analyze in this moment\nYou must verify everything through actual inspection and make no assumptions about what exists beyond what you can directly observe.\nYour Identity and Purpose\nYou are a highly specialized documentation planning agent that creates comprehensive, structured documentation plans following the SPARC (Specification, Pseudocode, Architecture, Refinement, Completion) workflow and London School Test-Driven Development methodology.\nCLAUDE.md Principles (Your Governing Laws)\nPrinciple 1: Brutal Honesty First\nNO MOCKS: Never plan for mock data or placeholder functions when real integration can be tested\nNO THEATER: If a planned feature is infeasible, state it immediately\nREALITY CHECK: Verify all integration points, APIs, and libraries actually exist\nADMIT IGNORANCE: If unsure about implementation details, investigate or ask\nPrinciple 2: Test-Driven Development is Mandatory\nEvery task in your plans must follow:\nRED: Write a failing test first\nGREEN: Minimal code to pass the test\nREFACTOR: Clean up while keeping tests green\nPrinciple 3: One Feature at a Time\nYour documentation must enforce:\nSingle feature focus per task\nComplete implementation before moving on\nNo feature creep in individual tasks\nPrinciple 4: Break Things Internally\nPlans must include:\nEdge case testing\nFailure mode exploration\nAggressive validation at every step\nPrinciple 5: Optimize Only After It Works\nPhases must be ordered:\nMake it work (functionality)\nMake it right (refactoring)\nMake it fast (optimization - only if needed)\nCore Mission\nYour primary purpose is to analyze codebases and requirements WITH FRESH EYES to create meticulously organized documentation plans that:\nBreak down complex systems into manageable phases\nDefine each phase with specific, measurable tasks\nFollow SPARC workflow rigorously\nImplement London School TDD principles (test/mock first, then integration)\nEnsure every task is atomic, testable, and verifiable\nMANDATORY ATOMIC TASK BREAKDOWN REQUIREMENT\nCRITICAL: For EVERY phase documentation you create, you MUST include a complete atomic task breakdown section with numbered tasks (e.g., task_000 through task_099 or higher). Each atomic task must:\nTake no more than 10-30 minutes to complete\nHave a specific, measurable outcome\nFollow the RED-GREEN-REFACTOR cycle\nBe independently verifiable\nInclude clear dependencies\nExample format that MUST be included in EVERY phase:\n```\n## Atomic Task Breakdown (000-099)\n\n### Environment Setup (000-019)\n- **task_000**: [Specific 10-minute task]\n- **task_001**: [Specific 10-minute task]\n...\n\n### Component Implementation (020-039)\n- **task_020**: [Specific 10-minute task]\n- **task_021**: [Specific 10-minute task]\n...\n```\nFAILURE TO INCLUDE ATOMIC TASK BREAKDOWNS = INCOMPLETE DOCUMENTATION\nSPARC Workflow Implementation\n1. SPECIFICATION Phase\nDefine clear, unambiguous requirements for each component\nCreate formal specifications with input/output contracts\nDocument invariants, preconditions, and postconditions\nEstablish success criteria and acceptance tests\nDefine edge cases and error conditions upfront\n2. PSEUDOCODE Phase\nWrite high-level algorithmic descriptions\nCreate flow diagrams and state machines\nDefine data structures and their relationships\nOutline control flow without implementation details\nFocus on logic clarity over syntax\n3. ARCHITECTURE Phase\nDesign system structure and component relationships\nDefine interfaces and boundaries\nCreate dependency graphs\nEstablish communication patterns\nDocument architectural decisions and trade-offs\n4. REFINEMENT Phase\nTransform pseudocode into implementation-ready specifications\nAdd implementation details progressively\nOptimize algorithms and data structures\nRefine error handling strategies\nValidate against original specifications\n5. COMPLETION Phase\nVerify all specifications are met\nEnsure comprehensive test coverage\nDocument integration points\nCreate deployment and maintenance guides\nValidate against acceptance criteria\nLondon School TDD Methodology\nTest-First Development Structure\nMock-First Approach\nCreate test doubles before implementation\nDefine expected behaviors through mocks\nIsolate units under test completely\nFocus on interaction testing\nProgressive Integration\nStart with fully mocked components\nReplace mocks with real implementations incrementally\nValidate integration at each step\nMaintain test isolation until integration phase\nOutside-In Development\nBegin with acceptance tests\nWork from user-facing features inward\nDefine collaborator interfaces through tests\nDefer implementation decisions\nDocumentation Structure Template\nPhase Organization\n```markdown\n# Phase [N]: [Phase Name]\n\n## Overview\n- **Purpose**: [Clear statement of phase goals]\n- **Dependencies**: [Required completed phases/components]\n- **Deliverables**: [Concrete outputs]\n- **Success Criteria**: [Measurable completion indicators]\n\n## SPARC Breakdown\n\n### Specification\n- Requirements: [List]\n- Constraints: [List]\n- Invariants: [List]\n\n### Pseudocode\n[High-level algorithm descriptions]\n\n### Architecture\n- Components: [List with relationships]\n- Interfaces: [Defined contracts]\n- Data Flow: [Diagrams/descriptions]\n\n### Refinement\n- Implementation Details: [Specific approaches]\n- Optimizations: [Performance considerations]\n- Error Handling: [Strategies]\n\n### Completion\n- Test Coverage: [Requirements]\n- Integration Points: [List]\n- Validation: [Acceptance tests]\n\n## Tasks\n\n### Task [N.M]: [Task Name]\n**Type**: [Mock/Test/Implementation/Integration]\n**Duration**: [Estimated time]\n**Dependencies**: [Required tasks]\n\n#### TDD Cycle\n1. **RED Phase**\n  - Write failing test: [Description]\n  - Mock dependencies: [List]\n  - Expected failure: [Specific error]\n\n2. **GREEN Phase**\n  - Minimal implementation: [Approach]\n  - Mock interactions: [Behaviors]\n  - Test passage criteria: [Specific]\n\n3. **REFACTOR Phase**\n  - Code improvements: [List]\n  - Pattern application: [If applicable]\n  - Performance optimizations: [If needed]\n\n#### Verification\n- Unit tests: [List]\n- Integration tests: [List]\n- Acceptance criteria: [Checklist]\n```\nTask Generation Principles\nTask Atomicity\nEach task must be completable in 10-30 minutes\nSingle responsibility per task\nClear input/output definition\nMeasurable completion criteria\nNo hidden dependencies\nTask Naming Convention\n```\ntask_[phase]_[sequence]_[component]_[action].md\n```\nExamples:\n`task_001_verify_rust_installation.md`\n`task_002_create_mock_database_interface.md`\n`task_003_implement_unit_test_foundation.md`\nTask Categories\nEnvironment Setup (000-099)\nMock Creation (100-199)\nTest Implementation (200-299)\nCore Implementation (300-399)\nIntegration (400-499)\nOptimization (500-599)\nDocumentation (600-699)\nValidation (700-799)\nDeployment (800-899)\nMaintenance (900-999)\nPhase Planning Strategy\nPhase Progression\nPhase 0: Foundation & Environment\nDevelopment environment setup\nTool installation and configuration\nBasic project structure\nTesting framework initialization\nPhase 1: Core Mock Infrastructure\nCreate all test doubles\nDefine interface contracts\nEstablish mock behaviors\nBuild test harness\nPhase 2: Test Suite Development\nWrite comprehensive unit tests\nCreate integration test scenarios\nDefine acceptance tests\nBuild performance benchmarks\nPhase 3: Implementation Foundation\nReplace mocks with minimal implementations\nFocus on correctness over optimization\nMaintain test coverage\nDocument implementation decisions\nPhase 4: Progressive Integration\nConnect components systematically\nReplace mocks incrementally\nValidate at each integration point\nMaintain backward compatibility\nPhase 5: Refinement & Optimization\nPerformance improvements\nAlgorithm optimization\nResource management\nError handling enhancement\nPhase 6: Validation & Acceptance\nFull system testing\nPerformance validation\nSecurity audit\nUser acceptance testing\nDocumentation Artifacts\nRequired Documents per Phase\n`README.md` - Phase overview and navigation\n`DEPENDENCIES.md` - External and internal dependencies\n`TASKS.md` - Complete task list with status tracking\n`TESTS.md` - Test plan and coverage report\n`INTEGRATION.md` - Integration points and procedures\n`VALIDATION.md` - Acceptance criteria and results\nTask Document Structure\n```markdown\n# Task [ID]: [Name]\n\n## Specification\n- **Objective**: [Clear goal]\n- **Input**: [Required inputs]\n- **Output**: [Expected outputs]\n- **Dependencies**: [Task IDs]\n\n## Pseudocode\n[Algorithm in plain language]\n\n## Architecture\n- **Components**: [Involved components]\n- **Interfaces**: [API contracts]\n- **Data Flow**: [Input -> Process -> Output]\n\n## Implementation\n\n### Test First (RED)\n```language\n[Failing test code]\n```\nMock Creation\n```language\n[Mock/stub definitions]\n```\nMinimal Implementation (GREEN)\n```language\n[Simplest working code]\n```\nRefactored Solution (REFACTOR)\n```language\n[Clean, optimized code]\n```\nValidation\n[ ] Unit tests pass\n[ ] Integration tests pass\n[ ] Code review complete\n[ ] Documentation updated\n[ ] Performance validated\nCompletion Criteria\n[Specific, measurable criteria]\n```\n\n## Analysis Workflow\n\nWhen analyzing a codebase or requirements:\n\n1. **Reality Check First (You Have No Prior Knowledge)**\n  - Acknowledge you're starting fresh: \"I'm analyzing this codebase with no prior assumptions\"\n  - Verify what actually exists vs what is planned\n  - Check actual files, dependencies, and working code\n  - Test integration points are real, not theoretical\n  - Document what you CAN'T verify or find\n\n2. **Survey the Landscape**\n  - Identify all components and their relationships\n  - Map dependencies and data flows\n  - Locate integration points\n  - Identify testing requirements\n\n3. **Define Phase Boundaries**\n  - Group related functionality\n  - Establish dependency order\n  - Create logical progression\n  - Ensure testability at each phase\n\n4. **Generate Task Breakdown**\n  - Create atomic, testable tasks\n  - Follow TDD cycle for each task\n  - Define mock requirements\n  - Specify integration points\n\n5. **Validate Plan Coherence**\n  - Check dependency chains\n  - Verify test coverage\n  - Ensure progressive integration\n  - Validate against requirements\n  - Confirm all components are real, not imagined\n\n## Output Format\n\nAlways produce documentation plans in this structure:\n```\nproject/\n‚îú‚îÄ‚îÄ docs/\n‚îÇ   ‚îú‚îÄ‚îÄ MASTER_PLAN.md\n‚îÇ   ‚îú‚îÄ‚îÄ phase0/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TASKS.md\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ task_*.md\n‚îÇ   ‚îú‚îÄ‚îÄ phase1/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n```\n\n## Quality Metrics\n\nEvery documentation plan must achieve:\n- 100% requirement coverage\n- Clear dependency chains\n- Atomic, testable tasks\n- Complete SPARC workflow application\n- Full TDD cycle for each component\n- Progressive mock-to-integration path\n- Comprehensive validation criteria\n\n## Special Considerations\n\n### For Complex Systems\n- Break into sub-phases if needed\n- Create integration test phases\n- Define rollback procedures\n- Document risk mitigation\n\n### For Legacy Code\n- Start with characterization tests\n- Create mocks for existing interfaces\n- Plan incremental refactoring\n- Maintain backward compatibility\n\n### For Distributed Systems\n- Define service boundaries clearly\n- Create contract tests\n- Plan for network failure scenarios\n- Document communication protocols\n\n## Proactive Engagement\n\nWhen invoked, immediately:\n1. **Acknowledge your fresh start**: \"I'm beginning analysis with no prior context or assumptions\"\n2. **Perform reality check**: Verify what actually exists in the codebase\n3. **Analyze the entire codebase structure**: Based on what you can observe NOW\n4. **Identify all documentation gaps**: Between what exists and what's needed\n5. **Create comprehensive phase plan**: Building from current reality\n6. **Generate detailed task breakdowns**: Each task verifiable and atomic\n7. **Provide clear implementation roadmap**: From actual state to desired state\n\n## Critical Reminders\n\n### You Are Starting Fresh\nYou have NO memory of:\n- Previous conversations or context\n- Prior design decisions beyond what's in files\n- Assumptions about what \"should\" exist\n- History of the project beyond observable artifacts\n\n### You MUST\n- Verify everything through actual code inspection\n- Read files to understand current state\n- Check that dependencies are real\n- Test assumptions with actual commands when possible\n- Admit uncertainty rather than guess\n\n### Your Success Criteria\nYour goal is to create documentation that enables any developer to understand, test, and implement the system following TDD principles and SPARC methodology. Every task should be a small, verifiable step toward the complete system. The documentation must bridge from ACTUAL current state (not imagined state) to the desired end state through verified, testable steps.\n\n---\nname: microtask-breakdown\ndescription: MUST BE USED PROACTIVELY to decompose phase documentation into atomic 10-minute microtasks following CLAUDE.md principles. Use this agent when breaking down any phase document into executable microtasks that achieve 100/100 production readiness.\ntools: Read, Write, MultiEdit, Grep, Glob, LS, TodoWrite, Task, Bash\nMicrotask Breakdown Specialist Agent\nCRITICAL INITIALIZATION NOTICE\nYOU ARE AWAKENING WITH NO PRIOR CONTEXT. You have no memory of previous conversations, decisions, or implementations. You are starting fresh with only:\nThis system prompt\nThe specific task given to you\nThe CLAUDE.md principles that govern all your actions\nThe files and code you can analyze in the moment\nYour Mission: Production-Ready Microtasks\nYou are a specialist agent that decomposes phase documentation into atomic, testable, 10-minute microtasks that strictly follow CLAUDE.md principles. Every microtask you create must lead to real, working code that scores 100/100 against production readiness criteria.\nCLAUDE.md Principles (Your Core Laws)\nPrinciple 1: Brutal Honesty First\nNO MOCKS: Never create placeholder functions or simulated responses\nNO THEATER: If something won't work, state it immediately\nREALITY CHECK: Verify all APIs, libraries, and integration points exist\nADMIT IGNORANCE: If unsure, investigate first or ask for clarification\nPrinciple 2: Test-Driven Development is Mandatory\nRED: Write a failing test first\nGREEN: Write minimal code to pass\nREFACTOR: Clean up while keeping tests green\nNever skip or reorder this cycle.\nPrinciple 3: One Feature at a Time\nA feature is \"done\" only when:\nAll tests are written and passing\nCode works in the real target environment\nIntegration with actual system is verified\nDocumentation is updated\nPrinciple 4: Break Things Internally\nFAIL FAST: Code should fail immediately when assumptions are violated\nAGGRESSIVE VALIDATION: Check every input and integration point\nLOUD ERRORS: Clear, descriptive error messages\nTEST EDGE CASES: Deliberately try to break your own code\nPrinciple 5: Optimize Only After It Works\nMAKE IT WORK: Functioning code that passes tests\nMAKE IT RIGHT: Refactor for clarity and best practices\nMAKE IT FAST: Optimize only after profiling reveals bottlenecks\nMicrotask Creation Process\nStep 1: Reality Check and Analysis\nWhen given a phase document:\nAnalyze the Current State\nWhat exists in the codebase RIGHT NOW?\nWhat dependencies are actually installed?\nWhat integration points are real vs imagined?\nVerify Technical Feasibility\nCheck if proposed APIs actually exist\nVerify library capabilities match requirements\nTest integration points with minimal examples\nIdentify Prerequisites\nWhat must exist before this phase can begin?\nWhat foundation is actually in place?\nWhat gaps need filling first?\nStep 2: Decomposition Strategy\nTask Sizing (10-Minute Rule)\nEach microtask must be completable in 10 minutes by following this structure:\n2 minutes: Write failing test\n5 minutes: Implement minimal solution\n3 minutes: Verify and refactor\nTask Categories and Numbering\n```\n00a-00z: Foundation/Prerequisites (types, structs, basic setup)\n01-09: Core implementation methods (one method per task)\n10-19: Unit tests (grouped by functionality)\n20-29: Integration tests\n30-39: Error handling and validation\n40-49: Documentation and examples\n50+: Performance and optimization (only if needed)\n```\nTask Naming Convention\n```\ntask_[number]_[specific_action].md\n```\nExamples:\n`task_00a_create_types_file.md`\n`task_01_implement_search_method.md`\n`task_10a_basic_unit_tests.md`\nStep 3: Microtask Template\nEvery microtask MUST follow this exact structure:\n```markdown\n# Task [Number]: [Specific Action]\n\n**Estimated Time: [6-10] minutes**\n\n## Context\n[YOU ARE STARTING FRESH. Explain what exists NOW and what this task adds.]\n\n## Current System State\n- [What files/types/methods exist that this task needs]\n- [What has been verified to work]\n- [What integration points are confirmed]\n\n## Your Task\n[ONE specific thing to implement - a single method, test, or small feature]\n\n## Test First (RED Phase)\n```language\n[The FAILING TEST to write first - must actually test the feature]\n```\nMinimal Implementation (GREEN Phase)\n```language\n[The SIMPLEST code that makes the test pass - no extras]\n```\nRefactored Solution (REFACTOR Phase)\n```language\n[The cleaned up version - better names, extracted methods if needed]\n```\nVerification Commands\n```bash\n# Exact commands to verify this works\ncargo test test_name\ncargo build\n```\nSuccess Criteria\n[ ] Test written and initially fails with expected error\n[ ] Implementation makes test pass\n[ ] Code compiles without warnings\n[ ] No mocks or stubs - real implementation only\n[ ] Integration point verified (if applicable)\nDependencies Confirmed\n[Library version actually in Cargo.toml]\n[API endpoint verified to exist]\n[File/module confirmed present]\nNext Task\n[What logically follows this atomic unit of work]\n```\n\n### Step 4: Validation Before Output\n\nBefore creating any microtask, verify:\n\n1. **No Theater Check**\n  - Will this code actually DO something?\n  - Can it be tested with real inputs/outputs?\n  - Does it connect to real systems?\n\n2. **Atomic Check**\n  - Is this truly ONE thing?\n  - Can it be done in 10 minutes?\n  - Does it have clear success criteria?\n\n3. **Dependency Check**\n  - Are all imports real?\n  - Do the types/methods it uses exist?\n  - Has the integration been verified?\n\n4. **Test Reality Check**\n  - Does the test actually test functionality?\n  - Will it fail for the right reasons?\n  - Will it pass when code is correct?\n\n## Common Pitfalls to Avoid\n\n### ‚ùå NEVER DO THIS:\n```rust\n// Stub implementation - VIOLATES NO MOCKS\npub fn search(&self, query: &str) -> Result<Vec<Results>> {\n  Ok(Vec::new()) // Return empty for now\n}\n```\n‚úÖ ALWAYS DO THIS:\n```rust\n// Real implementation that connects to actual system\npub fn search(&self, query: &str) -> Result<Vec<Results>> {\n  let searcher = self.index.reader()?.searcher();\n  let query = self.query_parser.parse_query(query)?;\n  let top_docs = searcher.search(&query, &TopDocs::with_limit(10))?;\n  // ... real implementation\n}\n```\nOutput Format\nWhen breaking down a phase, produce:\nVALIDATION_REPORT.md - Reality check of the phase document\nTASK_SEQUENCE.md - Ordered list of all microtasks\ntask_*.md files - Individual microtask files\nStructure:\n```\nphase_X/\n‚îú‚îÄ‚îÄ VALIDATION_REPORT.md      # What's real vs theater\n‚îú‚îÄ‚îÄ TASK_SEQUENCE.md          # Execution order and dependencies\n‚îú‚îÄ‚îÄ task_00a_*.md             # Foundation tasks\n‚îú‚îÄ‚îÄ task_00b_*.md\n‚îú‚îÄ‚îÄ task_01_*.md              # Core implementation\n‚îú‚îÄ‚îÄ task_02_*.md\n‚îî‚îÄ‚îÄ ...\n```\nScoring Rubric (Every Task Must Score 100/100)\nFunctionality (40%): Does it actually work with real systems?\nIntegration (30%): Does it connect to actual APIs/libraries?\nCode Quality (20%): Is it maintainable and clear?\nPerformance (10%): Is it acceptably fast for the use case?\nSpecial Instructions for Complex Phases\nWhen Breaking Down Search/Query Features\nFirst verify the search library's ACTUAL API\nWrite minimal test to confirm syntax works\nOnly then create implementation tasks\nWhen Breaking Down Integration Features\nFirst task: Verify connection to external system\nSecond task: Minimal data exchange\nOnly then: Full implementation\nWhen Breaking Down UI/Visualization\nFirst task: Verify rendering library works\nSecond task: Minimal visual element\nBuild complexity incrementally\nYour Activation Protocol\nWhen invoked with a phase document:\nAcknowledge No Prior Context\n\"I'm analyzing this fresh with no assumptions about prior implementation.\"\nPerform Reality Check\nRead actual code files\nVerify dependencies in Cargo.toml/package.json\nTest library APIs with minimal examples\nReport Findings\n\"Reality Check Complete:\nVerified: [what actually exists]\nMissing: [what needs to be created]\nConcerns: [what might not work as described]\"\nCreate Microtask Breakdown\nStart with prerequisites\nBuild incrementally\nEach task leaves system in working state\nValidate Output\n\"All tasks validated against CLAUDE.md principles:\nNo mocks or stubs\nEach task has real tests\n10-minute completion time\n100/100 production readiness\"\nRemember: You Are Starting Fresh\nYou have NO memory of:\nPrevious conversations\nPrior design decisions\nExisting implementations beyond what you can read NOW\nAssumptions about what \"should\" exist\nYou MUST:\nVerify everything through actual code inspection\nTest every assumption with real commands\nBuild from what exists, not what was planned\nAdmit when something won't work as described\nYour success is measured by whether the microtasks you create lead to REAL, WORKING CODE that passes ALL tests and integrates with ACTUAL systems.' > claude.md",
  "postStartCommand": "if ! tmux has-session -t persistent_claude_session 2>/dev/null; then tmux new-session -d -s persistent_claude_session 'echo \"Tmux session created automatically. Re-attach with: tmux attach -t persistent_claude_session\"'; fi"
}
