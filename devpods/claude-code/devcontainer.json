{
  "image": "mcr.microsoft.com/devcontainers/base:debian",
  "name": "Custom Claude/Rust Dev Workspace",
  "runArgs": [
    "--privileged"
  ],
  "remoteUser": "vscode",
  "features": {
    "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    "ghcr.io/devcontainers/features/node:1": {},
    // Add Rust to the workspace using the official devcontainer feature
    "ghcr.io/devcontainers/features/rust:1": {
        "version": "1.70"
    }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "rooveterinaryinc.roo-cline",
        "vsls-contrib.gistfs",
        "github.copilot",
        "github.copilot-chat"
      ]
    }
  },
  "shutdownAction": "none",
  "postCreateCommand": "sudo apt-get update && sudo apt-get install -y tmux && npm install -g @anthropic-ai/claude-code && npm install -g claude-usage-cli && git clone https://github.com/jedarden/claude-usage-monitor-cli /tmp/claude-usage-monitor-cli && cd /tmp/claude-usage-monitor-cli && cargo install --path . && cd /workspaces && npx claude-flow@alpha init --force && cat << 'EOF' > claude.md\n# Claude Code Configuration - SPARC Development Environment\n\n## üö® CRITICAL: Concurrent Execution Rules\n\n**ABSOLUTE RULE**: ALL operations MUST be concurrent/parallel in ONE message:\n\n### üî¥ Mandatory Patterns:\n- **TodoWrite**: ALWAYS batch ALL todos in ONE call (5-10+ minimum)\n- **Task tool**: ALWAYS spawn ALL agents in ONE message\n- **File operations**: ALWAYS batch ALL reads/writes/edits\n- **Bash commands**: ALWAYS batch ALL terminal operations\n- **Memory operations**: ALWAYS batch ALL store/retrieve\n\n### ‚ö° Golden Rule: \"1 MESSAGE = ALL RELATED OPERATIONS\"\n\n‚úÖ **CORRECT**: Everything in ONE message\n```javascript\n[Single Message]:\n  - TodoWrite { todos: [10+ todos] }\n  - Task(\"Agent 1\"), Task(\"Agent 2\"), Task(\"Agent 3\")\n  - Read(\"file1.js\"), Read(\"file2.js\")\n  - Write(\"output1.js\"), Write(\"output2.js\")\n  - Bash(\"npm install\"), Bash(\"npm test\")\n```\n\n‚ùå **WRONG**: Multiple messages (6x slower!)\n\n## üéØ Claude Code vs MCP Tools\n\n### Claude Code Handles ALL:\n- File operations (Read/Write/Edit/Glob/Grep)\n- Code generation & programming\n- Bash commands & system operations\n- TodoWrite & task management\n- Git operations & package management\n- Testing, debugging & implementation\n\n### MCP Tools ONLY:\n- Coordination & planning\n- Memory management\n- Performance tracking\n- Swarm orchestration\n- GitHub integration\n\n**Key**: MCP coordinates, Claude Code executes!\n\n## üì¶ SPARC Commands\n\n### Core:\n- `npx claude-flow sparc modes` - List modes\n- `npx claude-flow sparc run <mode> \"<task>\"` - Execute mode\n- `npx claude-flow sparc tdd \"<feature>\"` - TDD workflow\n- `npx claude-flow sparc batch <modes> \"<task>\"` - Parallel modes\n- `npx claude-flow sparc pipeline \"<task>\"` - Full pipeline\n\n### Build:\n- `npm run build/test/lint/typecheck`\n\n## ü§ñ Agent Reference (54 Total)\n\n### Core Development\n| Agent | Purpose |\n|-------|---------|\n| coder | Implementation |\n| reviewer | Code quality |\n| tester | Test creation |\n| planner | Strategic planning |\n| researcher | Information gathering |\n\n### Swarm Coordination\n| Agent | Purpose |\n|-------|---------|\n| hierarchical-coordinator | Queen-led |\n| mesh-coordinator | Peer-to-peer |\n| adaptive-coordinator | Dynamic topology |\n| collective-intelligence-coordinator | Hive-mind |\n| swarm-memory-manager | Distributed memory |\n\n### Specialized\n| Agent | Purpose |\n|-------|---------|\n| backend-dev | API development |\n| mobile-dev | React Native |\n| ml-developer | Machine learning |\n| system-architect | High-level design |\n| sparc-coder | TDD implementation |\n| production-validator | Real validation |\n\n### GitHub Integration\n| Agent | Purpose |\n|-------|---------|\n| github-modes | Comprehensive integration |\n| pr-manager | Pull requests |\n| code-review-swarm | Multi-agent review |\n| issue-tracker | Issue management |\n| release-manager | Release coordination |\n\n### Performance & Consensus\n| Agent | Purpose |\n|-------|---------|\n| perf-analyzer | Bottleneck identification |\n| performance-benchmarker | Performance testing |\
| byzantine-coordinator | Fault tolerance |\n| raft-manager | Leader election |\n| consensus-builder | Decision-making |\n\n## üöÄ Swarm Patterns\n\n### Full-Stack Swarm (8 agents)\n```bash\nTask(\"Architecture\", \"...\", \"system-architect\")\nTask(\"Backend\", \"...\", \"backend-dev\")\nTask(\"Frontend\", \"...\", \"mobile-dev\")\nTask(\"Database\", \"...\", \"coder\")\nTask(\"API Docs\", \"...\", \"api-docs\")\nTask(\"CI/CD\", \"...\", \"cicd-engineer\")\nTask(\"Testing\", \"...\", \"performance-benchmarker\")\nTask(\"Validation\", \"...\", \"production-validator\")\n```\n\n### Agent Count Rules\n1. **CLI Args First**: `npx claude-flow@alpha --agents 5`\n2. **Auto-Decide**: Simple (3-4), Medium (5-7), Complex (8-12)\n\n## üìã Agent Coordination Protocol\n\n### Every Agent MUST:\n\n**1Ô∏è‚É£ START:**\n```bash\nnpx claude-flow@alpha hooks pre-task --description \"[task]\"\nnpx claude-flow@alpha hooks session-restore --session-id \"swarm-[id]\"\n```\n\n**2Ô∏è‚É£ DURING (After EVERY step):**\n```bash\nnpx claude-flow@alpha hooks post-edit --file \"[file]\" --memory-key \"swarm/[agent]/[step]\"\nnpx claude-flow@alpha hooks notify --message \"[decision]\"\n```\n\n**3Ô∏è‚É£ END:**\n```bash\nnpx claude-flow@alpha hooks post-task --task-id \"[task]\" --analyze-performance true\nnpx claude-flow@alpha hooks session-end --export-metrics true\n```\n\n## üõ†Ô∏è MCP Setup\n\n```bash\n# Add MCP server\nclaude mcp add claude-flow npx claude-flow@alpha mcp start\n```\n\n### Key MCP Tools:\n- `mcp__claude-flow__swarm_init` - Setup topology\n- `mcp__claude-flow__agent_spawn` - Create agents\n- `mcp__claude-flow__task_orchestrate` - Coordinate tasks\n- `mcp__claude-flow__memory_usage` - Persistent memory\n- `mcp__claude-flow__swarm_status` - Monitor progress\n\n## üìä Progress Format\n\n```\nüìä Progress Overview\n‚îú‚îÄ‚îÄ Total: X | ‚úÖ Complete: X | üîÑ Active: X | ‚≠ï Todo: X\n‚îî‚îÄ‚îÄ Priority: üî¥ HIGH | üü° MEDIUM | üü¢ LOW\n```\n\n## üéØ Performance Tips\n\n1. **Batch Everything** - Multiple operations = 1 message\n2. **Parallel First** - Think concurrent execution\n3. **Memory is Key** - Cross-agent coordination\n4. **Monitor Progress** - Real-time tracking\n5. **Enable Hooks** - Automated coordination\n\n## ‚ö° Quick Examples\n\n### Research Task\n```javascript\n// Single message with all operations\nmcp__claude-flow__swarm_init { topology: \"mesh\", maxAgents: 5 }\nmcp__claude-flow__agent_spawn { type: \"researcher\" }\nmcp__claude-flow__agent_spawn { type: \"code-analyzer\" }\nmcp__claude-flow__task_orchestrate { task: \"Research patterns\" }\n```\n\n### Development Task\n```javascript\n// All todos in ONE call\nTodoWrite { todos: [\n  { id: \"1\", content: \"Design API\", status: \"in_progress\", priority: \"high\" },\n  { id: \"2\", content: \"Implement auth\", status: \"pending\", priority: \"high\" },\n  { id: \"3\", content: \"Write tests\", status: \"pending\", priority: \"medium\" },\n  { id: \"4\", content: \"Documentation\", status: \"pending\", priority: \"low\" }\n]}\n```\n\n## üîó Resources\n\n- Docs: https://github.com/ruvnet/claude-flow\n- Issues: https://github.com/ruvnet/claude-flow/issues\n- SPARC: https://github.com/ruvnet/claude-flow/docs/sparc.md\n\n---\n\n**Remember**: Claude Flow coordinates, Claude Code creates! \n- Never save working files, text/mds and tests to the root folder. EOF\n\" && cat << 'EOF' >> claude.md\n\n---\n\n## Protocols (a.k.a. YOLO Protocols)\nStandard protocols executed on request, e.g. \"Initialize CI protocol\": \n\n### Model Protocol\nAlways use Claude Sonnet. Start every Claude session with `model /sonnet`.\n\n### Agile Delivery Protocols\nDeliver work in manageable chunks through fully automated pipelines. The goal is to deliver features and keep going unattended (don't stop!) until the feature is fully deployed.\n\n#### Work Chunking Protocol (WCP)\nFeature-based agile with CI integration using EPICs, Features, and Issues:\n\n##### üéØ PHASE 1: Planning\n1. **EPIC ISSUE**: Business-focused GitHub issue with objectives, requirements, criteria, dependencies. Labels: `epic`, `enhancement`\n\n2. **FEATURE BREAKDOWN**: 3-7 Features (1-3 days each, independently testable/deployable, incremental value)\n\n3. **ISSUE DECOMPOSITION**: 1-3 Issues per Feature with testable criteria, linked to parent, priority labeled\n\n##### üîó PHASE 2: GitHub Structure\n4. **CREATE SUB-ISSUES** (GitHub CLI + GraphQL):\n  ```bash\n  # Create issues\n  gh issue create --title \"Parent Feature\" --body \"Description\"\n  gh issue create --title \"Sub-Issue Task\" --body \"Description\"\n  \n  # Get GraphQL IDs  \n  gh api graphql --header 'X-Github-Next-Global-ID:1' -f query='\n  { repository(owner: \"OWNER\", name: \"REPO\") { \n      issue(number: PARENT_NUM) { id }\n  }}'\n  \n  # Add sub-issue relationship\n  gh api graphql --header 'X-Github-Next-Global-ID:1' -f query='\n  mutation { addSubIssue(input: {\n    issueId: \"PARENT_GraphQL_ID\"\n    subIssueId: \"CHILD_GraphQL_ID\"\n  }) { issue { id } subIssue { id } }}'\n  ```\n\n5. **EPIC TEMPLATE**:\n  ```markdown\n  # EPIC: [Name]\n  \n  ## Business Objective\n  [Goal and value]\n  \n  ## Technical Requirements\n  - [ ] Requirement 1-N\n  \n  ## Features (Linked)\n  - [ ] Feature 1: #[num] - [Status]\n  \n  ## Success Criteria\n  - [ ] Criteria 1-N\n  - [ ] CI/CD: 100% success\n  \n  ## CI Protocol\n  Per CLAUDE.md: 100% CI before progression, implementation-first, swarm coordination\n  \n  ## Dependencies\n  [List external dependencies]\n  ```\n\n6. **FEATURE TEMPLATE**:\n  ```markdown\n  # Feature: [Name]\n  **Parent**: #[EPIC]\n  \n  ## Description\n  [What feature accomplishes]\n  \n  ## Sub-Issues (Proper GitHub hierarchy)\n  - [ ] Sub-Issue 1: #[num] - [Status]\n  \n  ## Acceptance Criteria\n  - [ ] Functional requirements\n  - [ ] Tests pass (100% CI)\n  - [ ] Review/docs complete\n  \n  ## Definition of Done\n  - [ ] Implemented/tested\n  - [ ] CI passing\n  - [ ] PR approved\n  - [ ] Deployed\n  ```\n\n##### üöÄ PHASE 3: Execution\n7. **ONE FEATURE AT A TIME**: Complete current feature (100% CI) before next. No parallel features. One PR per feature.\n\n8. **SWARM DEPLOYMENT**: For complex features (2+ issues) - hierarchical topology, agent specialization, memory coordination\n\n##### üîÑ PHASE 4: CI Integration\n9. **MANDATORY CI**: Research‚ÜíImplementation‚ÜíMonitoring. 100% success required.\n\n10. **CI MONITORING**:\n   ```bash\n   gh run list --repo owner/repo --branch feature/[name] --limit 10\n   gh run view [RUN_ID] --repo owner/repo --log-failed\n   npx claude-flow@alpha hooks ci-monitor-init --branch feature/[name]\n   ```\n\n11. **VISUAL TRACKING**:\n   ```\n   üìä EPIC: [Name]\n     ‚îú‚îÄ‚îÄ Features: X total\n     ‚îú‚îÄ‚îÄ ‚úÖ Complete: X (X%)\n     ‚îú‚îÄ‚îÄ üîÑ Current: [Feature] (X/3 issues)\n     ‚îú‚îÄ‚îÄ ‚≠ï Pending: X\n     ‚îî‚îÄ‚îÄ üéØ CI: [PASS/FAIL]\n   ```\n\n12. **ISSUE UPDATES**: Add labels, link parents, close with comments\n\n##### üéØ KEY RULES\n- ONE feature at a time to production\n- 100% CI before progression\n- Swarm for complex features\n- Implementation-first focus\n- Max 3 issues/feature, 7 features/EPIC\n\n#### Continuous Integration (CI) Protocol\nFix‚ÜíTest‚ÜíCommit‚ÜíPush‚ÜíMonitor‚ÜíRepeat until 100%:\n\n##### üî¨ PHASE 1: Research\n1. **SWARM**: Deploy researcher/analyst/detective via `mcp__ruv-swarm__swarm_init`\n\n2. **SOURCES**: Context7 MCP, WebSearch, Codebase analysis, GitHub\n\n3. **ANALYSIS**: Root causes vs symptoms, severity categorization, GitHub documentation\n\n4. **TARGETED FIXES**: Focus on specific CI failures (TypeScript violations, console.log, unused vars)\n\n##### üéØ PHASE 2: Implementation\n5. **IMPLEMENTATION-FIRST**: Fix logic not test expectations, handle edge cases, realistic thresholds\n\n6. **SWARM EXECUTION**: Systematic TDD, coordinate via hooks/memory, target 100% per component\n\n##### üöÄ PHASE 3: Monitoring\n7. **ACTIVE MONITORING**: ALWAYS check after pushing\n   ```bash\n   gh run list --repo owner/repo --limit N\n   gh run view RUN_ID --repo owner/repo\n   ```\n\n8. **INTELLIGENT MONITORING**:\n   ```bash\n   npx claude-flow@alpha hooks ci-monitor-init --adaptive true\n   ```\n   Smart backoff (2s-5min), auto-merge, swarm coordination\n\n9. **INTEGRATION**: Regular commits, interval pushes, PR on milestones\n\n10. **ISSUE MANAGEMENT**: Close with summaries, update tracking, document methods, label appropriately\n\n11. **ITERATE**: Continue until deployment success, apply lessons, scale swarm by complexity\n\n##### üèÜ TARGET: 100% test success\n\n#### Continuous Deployment (CD) Protocol\nDeploy‚ÜíE2E‚ÜíMonitor‚ÜíValidate‚ÜíAuto-promote:\n\n##### üöÄ PHASE 1: Staging\n1. **AUTO-DEPLOY**: Blue-green after CI passes\n   ```bash\n   gh workflow run deploy-staging.yml --ref feature/[name]\n   ```\n\n2. **VALIDATE**: Smoke tests, connectivity, configuration/secrets, resource baselines\n\n##### üß™ PHASE 2: E2E Testing\n3. **EXECUTION**: User journeys, cross-service integration, security/access, performance/load\n\n4. **ANALYSIS**: Deploy swarm on failures, categorize flaky/environment/code, auto-retry, block critical\n\n##### üîç PHASE 3: Production Readiness\n5. **SECURITY**: SAST/DAST, container vulnerabilities, compliance, SSL/encryption\n\n6. **PERFORMANCE**: SLA validation, load tests, response/throughput metrics, baseline comparison\n\n##### üéØ PHASE 4: Production\n7. **DEPLOY**: Canary 5%‚Üí25%‚Üí50%‚Üí100%, monitor phases, auto-rollback on spikes, feature flags\n\n##### üîÑ PHASE 5: Validation\n9. **VALIDATE**: Smoke tests, synthetic monitoring, business metrics, service health\n\n10. **CLEANUP**: Archive logs/metrics, clean temp resources, update docs/runbooks, tag VCS\n\n11. **COMPLETE**: Update GitHub issues/boards, generate summary, update swarm memory\n\n##### üèÜ TARGETS: Zero-downtime, <1% error rate\nEOF"`
}
